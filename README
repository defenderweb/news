CWD News & PR Application

Portal for CWD Press Releases, News, Press Kits and Executive Bios.

Heroku
======

To setup heroku on another computer:

  gem install heroku
  cd into app directory
  heroku login
  git remote add heroku git@heroku.com:appname.git


Users
=====
- Once logged in, Users will be able to write, edit and delete content throughout the app
- Users login with email address and password
- Users are be able to change their own email address, name and password
- Need one Admin Super User with control over all users and the creation of new users


Posts
=====
- Posts are Press Releases (should probably rename this "Press Releases"!?!?)
- Press Releases have title, date, body
- Press Releases have a single auther (a user) which will be visible in the view under "Contact Info"
- Press Releases have one main brand association which provides the use of the brand icon and links to the brands presskit
- Press Releases have many brands and products associations which provide links to presskits 


Presskits
=========
- Presskits have many Press Releases
- Pressktis have many images for download (.eps, .jpg, .png, .svg) under "Images"
- Presskits have a URL
- Presskits have other downloads (.pdfs) and links under "More Information"
- There are two types of Presskits:	
	
	Brands
	======
	- Brands have an icon (img url)
	- Brands have many Products
	- Brands show Products (if exists?) which link to Product Presskits
	- Brands show Products in Categories (if exists?)
	- Brands have a parent Brand; they are either top tier (CWD), a division (SVAT, BTG, TRONICS) or a child 	
	
	Products
	========
	- Products belong to a Brand
	- Products belong to a Category
	- Product Presskits show Brand Images as well as their own Product Images for download


Categories
==========
- Belong to a Brand
- Has many Products
- Need to add ability to edit/delete a category; products within deleted category would have to be updated with category_id = ''


Tags
====

- Tags should be applied to Post
- Tags can only be our Product or Brand names


Executive Bios
==============
- Can wait
- Will have image, name, job title, body


News
====

- Can wait till everything else is done
- News will be upcoming events or awards announcements
- News will have an image thumbnail
- News will have the ability to add images to the article


Specific Q's for Nick
=====================
		
		
		
What's the cleanest way to do this:

	#if brand url is filled in show it
	<% if @brand.url.exists? %> 
		<%= link_to "View #{@brand.name}'s Website", @brand.url, :target => "_blank" %>
	<% end %>
	
	
	
What is the cleanest, most efficient, reuseable way to show a list of posts (* renamed press_releases) with optionional icon

	#taken from home/index
	<table>
		<% Post.latest_posts.each do |post| %>
			<tr>
			<!-- What's the best method to make this image a link??  -->
			<td><img src="<%= post.brand.icon %>" height="75" width="75" /></td>
			<td>	
				<em><%= post.date.strftime("%B %d %Y")  %></em><br />
				<strong><%= link_to post.title.truncate(150), post %></strong>
				<br />
				<%= link_to 'Edit', edit_post_path(post) %>
		    	<%= link_to 'Destroy', post, :confirm => 'Are you sure?', :method => :delete %>
			</td>
		<% end %>
	</table>
	
	#REFACTORED TO:
	<table>
		<% PressRelease.latest_press_releases.each do |press_release| %>
			<tr>
				<td><%= image_tag press_release.brand.icon, {:height => 75 } %></td>
				<td><%= render(press_release) %></td>
			</tr>
		<% end %>
	</table>
	
	
	
With all of these "Back" and "Cancel" buttons, what's the best way to 
ensure the user goes back to the same page they came from?

	1. Could simply limit amount of new, edit, and delete links.  
		E.G. only have "Edit" links on the "Show" page; right now you 
		can get to "Product#Edit" from the "Brand#Show" page which causes 
		confusion when redirected to "Product#Show" after update

	2. There must be some ruby magic to grab the page you came from ... right?
	

Best way to have "push-1 last" added to the class name of every other category class?

	<% @brand.categories.each_with_index do |category, index| %>
		<% if category.products.exists? %>
			<% if index.even? %>
				<div class="clear"></div>
				<div class="span-8">
			<% else %>
				<div class="span-8 push-1 last">
			<% end%>
				<%= render category %>
			</div>
		<% end %>
	<% end %>
	
	

